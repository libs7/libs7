.Dd May 20, 2023
.Dt s7 Garbage_Collection
.Os
.Sh NAME
.Nm s7_gc_protect,
.Nm s7_gc_unprotect_at,
.Nm s7_gc_protected_at,
.Nm s7_gc_protect_via_stack,
.Nm s7_gc_unprotect_via_stack,
.Nm s7_gc_protect_via_location,
.Nm s7_gc_unprotect_via_location,
.Nm s7_gc_on
.Nd s7 FFI Garbage Collection API
.Sh DESCRIPTION
If you create an s7 object in C, that object needs to be GC protected if there is any chance the GC might run without an existing Scheme-level reference to it.
.Fn s7_gc_protect
places the object in a vector that the GC always checks, returning the object's location in that table.
.Fn s7_gc_unprotect_at
unprotects the object (removes it from the vector) using the location passed to it.
.Fn s7_gc_protected_at
returns the object at the given location. There is a built-in lag between the creation of a new object and its first possible GC (the lag time is set indirectly by GC_TEMPS_SIZE in s7.c), so you don't need to worry about very short term temps such as the arguments to s7_cons in:

s7_cons(s7, s7_make_real(s7, 3.14),
            s7_cons(s7, s7_make_integer(s7, 123), s7_nil(s7)));

The
.F protect_via_stack
functions place the object on the s7 stack where it is protected until the stack unwinds past that point. Besides speed, this provides a way to be sure an object is unprotected even in some complicated situation where error handling may bypass an explicit
.Fn s7_gc_unprotect_at
call. The
.Fa protect_via_location
are intended for cases where you have a location already (from
.Fn s7_gc_protect
), and want to reuse it for a different object.
.Fn s7_gc_on
turns the GC on or off. Objects can be created at a blistering pace, so don't leave the GC off for a long time!
