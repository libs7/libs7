package(default_visibility = ["//visibility:public"])

# exports_files(["s7.h", "libs7.h"])

load("@makeheaders//src:RULES.bzl", "makeheaders")

load("//:BUILD.bzl",
     "LIBS7_VERSION",
     "RUNFILES_VERSION",
     "UTHASH_VERSION")

load("//config/cc:BUILD.bzl",
     "BASE_SRCS", "BASE_DEPS", "BASE_INCLUDE_PATHS",
     "BASE_COPTS", "BASE_DEFINES", "BASE_LINKOPTS")

SRCS          = BASE_SRCS
DEPS          = BASE_DEPS + [
    "@runfiles//src:runfiles",
    "@uthash//src:uthash"
]
INCLUDE_PATHS = BASE_INCLUDE_PATHS + [
    "-I$(GENDIR)/external/runfiles~{}/src".format(RUNFILES_VERSION),
    # "-Iexternal/runfiles~{}/src".format(RUNFILES_VERSION),
    "-Iexternal/uthash~{}/src".format(UTHASH_VERSION)
]
COPTS         = BASE_COPTS + INCLUDE_PATHS
DEFINES       = BASE_DEFINES
LINKOPTS      = BASE_LINKOPTS

# WITH_SYSTEM_EXTRAS
  # is_directory_symbol, file_exists_symbol, delete_file_symbol,
  # getenv_symbol, system_symbol,
  # directory_to_list_symbol,
  # file_mtime_symbol

# used in s7.c only:
# WITH_MAIN - enables main() for std repl

# WITH_NOTCURSES - if also WITH_MAIN, includes nrepl.c and excludes
# std repl code, and loads nrepl.scm in s7_repl.
# if WITH_MAIN && WITH_NOTCURSES
#     #include nrepl.c,

###########
cc_library( # delivers libs7.lo
    name  = "s7",
    linkstatic = True,
    alwayslink = True,
    srcs  = SRCS + [
        "fs_api.c", # FIXME: replace with cwalk
        "s7.c",
        "libs7.c",
        "s7.h",
        ":mkhdrs",
    ] + select({
        "//config/profile:dev?": [
            "debug_s7.c"
        ],
        "//conditions:default": []
    }),
    deps  = DEPS,
    hdrs  = ["libs7.h", "s7.h"],
    copts = COPTS + [
        "-Wno-unused-parameter",
        # s7.h
        "-Isrc",
        "-Iexternal/libs7~{}/src".format(LIBS7_VERSION),
        # libs7.h, libs7.h
        "-I$(GENDIR)/src",
        "-I$(GENDIR)/external/libs7~{}/src".format(LIBS7_VERSION),
    ] + select({
        "//config/host/build:macos?": [
            # allow for warnings in s7.c
            "-Wno-format-pedantic",
            "-Wno-gnu-statement-expression"
        ],
        "//config/host/build:linux?": [
            "-Wno-implicit-fallthrough"
        ],
        "//conditions:default": []
    }),
    data = [
        # "//repl:scm",
        "//scm:srcs",
        "//scm/srfi:srcs",
        "//scm/s7:srcs", "s7.h"
    ],
    local_defines = DEFINES + [
        "WITH_SYSTEM_EXTRAS",
        "WITH_C_LOADER"
        # FIXME: if --//config:notcurses
        # "WITH_MAIN",
        # "WITH_NOTCURSES"
    ],
    linkopts = LINKOPTS
)

##################
cc_shared_library(
    name = "s7_shared",
    shared_lib_name = select({
        "@platforms//os:macos": "libs7.dylib",
        "@platforms//os:linux": "libs7.so",
        # "@platforms//os:windows": "libs7.dll",
        "//conditions:default": "libs7.so"
    }),
    deps = [":s7"]
)

makeheaders(
    name = "mkhdrs",
    hdrs_renamed = {"libs7.c": "libs7_internal.h"},
    hdrs_srcs = select({
        "//config/profile:dev?": [
            "debug_s7.c"
        ],
        "//conditions:default": []
    }),
    additional_srcs = ["s7.h", "fs_api.c"] + select({
        "//config/profile:dev?": [
            "//src/macros:trace.h",
            "//src/macros:ansi_colors.h",
        ],
        "//conditions:default": ["//src/macros:notrace.h"]
    }),
)

makeheaders(
    name = "mkhdrs_export",
    out ="libs7.h",
    export_interface = True,
    hdrs_srcs = [
        "libs7.c",
    ] + select({
        "//config/profile:dev?": [
            "debug_s7.c"
        ],
        "//conditions:default": []
    }),
    additional_srcs = ["s7.h", "fs_api.c"],
    # + select({
    #     "//config/profile:dev?": [
    #         "//src/macros:trace.h",
    #         "//src/macros:ansi_colors.h",
    #     ],
    #     "//conditions:default": ["//src/macros:notrace.h"]
    # }),
    visibility = ["//visibility:public"]
)


##########
# cc_binary(                      #  libs7.so
#     name  = "s7x",
#     linkshared = True,
#     # alwayslink = 1,
#     srcs  = SRCS + [
#         "fs_api.c", # FIXME: replace with cwalk
#         "s7.c",
#         "libs7.c",
#         "libs7.h", "s7.h",
#     ],
#     deps  = DEPS, # + ["//vendored/uthash"],
#     copts = COPTS + [
#         "-Wno-unused-parameter",
#         # "-Ivendored/uthash", "-Iexternal/libs7/vendored/uthash"
#     ] + select({
#         "//config/host/build:macos?": [
#             # allow for warnings in s7.c
#             "-Wno-format-pedantic",
#             "-Wno-gnu-statement-expression"
#         ],
#         "//config/host/build:linux?": [
#             "-Wno-implicit-fallthrough"
#         ],
#         "//conditions:default": []
#     }),
# #     copts = COPTS
# # [
# #         "-Wall",
# #         "-Wextra",
# #         # "-Werror=pedantic",
# #         "-Wno-unused-parameter",
# #         "-Isrc",
# #         "-Ivendored/logc",
# #         "-Iexternal/libs7/vendored/logc",
# #         "-Ivendored/uthash",
# #         "-Iexternal/libs7/vendored/uthash",
# #         "-Iexernal/libs7/src",
# #     ] + select({
# #         "//:macos": [
# #             "-Wno-format-pedantic",
# #             "-Wno-gnu",
# #             "-std=c11"
# #         ],
# #         "//:linux": [
# #             "-std=gnu11",
# #             "-Wno-unused-function",
# #             "-Wno-implicit-fallthrough",
# #             # "--pedantic-errors",
# #             "-fPIC",
# #         ],
# #         "//conditions:default": ["-std=c11"],
# #     }),
#     data = [
#         # "//repl:scm",
#         "//scm:srcs", "//scm/s7:srcs", "s7.h"
#     ],
#     local_defines = DEFINES + [
#         "WITH_SYSTEM_EXTRAS",
#         "WITH_C_LOADER"
#         # FIXME: if --//config:notcurses
#         # "WITH_MAIN",
#         # "WITH_NOTCURSES"
#     ],
#     linkopts = LINKOPTS
# )
