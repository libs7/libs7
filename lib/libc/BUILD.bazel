load("@bazel_skylib//rules:run_binary.bzl", "run_binary")

exports_files(["libc_clibgen.scm"])

load("//lib:BUILD.bzl",
     "clibgen_runner",
     "CLIB_COPTS", "CLIB_LINKOPTS", "CLIB_DEFINES")

################################################################
# cc_library(
#     name  = "c_s7_static", # emits libc_s7_static.a
#     linkstatic = 1,
#     srcs  = [":libc_s7.c", "//src:s7.h"],
#     hdrs  = [":libc_s7.h"],
#     copts = CLIB_COPTS,
#     linkopts = CLIB_LINKOPTS,
#     defines = CLIB_DEFINES,
#     visibility = ["//visibility:public"]
# )

# cc_binary(
#     name  = "c_s7",  # create libc_s7.{dylib,so}
#     linkshared = True,
#     srcs  = [":libc_s7.c", "//src:s7.h"],
#     copts = CLIB_COPTS,
#     linkopts = CLIB_LINKOPTS,
#     defines = CLIB_DEFINES,
#     visibility = ["//visibility:public"]
# )

# run_binary(
clibgen_runner(
    name = "libc_s7_runbin",
    tool = "//lib:clibgen",
    args = ["libc_clibgen.scm"],
    srcs = [":libc_clibgen.scm", "//lib:clibgen.scm"],
    outs = [":libc_s7.h", ":libc_s7.c"],
)

# genrule( ## C source generation
#     name = "libc_s7_clib",
#     srcs = [":libc_clibgen.scm", "//lib:clibgen.scm"],
#     outs = ["libc_s7.c", "libc_s7.h"],
#     tools = ["//lib:clibgen"],
#     cmd  = "\n".join([
#         "$(execpath //lib:clibgen) $(location :libc_clibgen.scm) ;",
#         "cp libc_s7.c $(RULEDIR)/ ;",
#         "cp libc_s7.h $(RULEDIR)/ ;"
#     ]),
#     visibility = ["//visibility:private"]
# )
