package(default_visibility = ["//visibility:public"])

exports_files(["libcjson_clibgen.scm"])


load("//:BUILD.bzl", "BASE_SRCS", "BASE_DEPS",
     "BASE_COPTS", "BASE_INCLUDE_PATHS", "BASE_DEFINES", "BASE_LINKOPTS")

load("//lib:BUILD.bzl", "clibgen_runner",
     "CLIB_SRCS", "CLIB_INCLUDE_PATHS", "CLIB_COPTS", "CLIB_LINKOPTS")

SRCS          = BASE_SRCS + CLIB_SRCS
INCLUDE_PATHS = BASE_INCLUDE_PATHS + CLIB_INCLUDE_PATHS
COPTS         = BASE_COPTS + CLIB_COPTS + INCLUDE_PATHS
DEPS          = BASE_DEPS
DEFINES       = BASE_DEFINES
LINKOPTS      = BASE_LINKOPTS + CLIB_LINKOPTS

################################################################
cc_library(
    name  = "json_s7_archive", # emits libjson_s7_archive.a
    linkstatic = True,
    alwayslink = True, # ensure init fn sym available for dlsym
    srcs  = SRCS + [
        # "//src:s7.h",
        # "//src:libs7.h",
        # "//lib:utils.h",
        # "//lib:utils.c",
        "libcjson_s7.c",
        # "libjson_s7.h",
        # "cJSON.c", "cJSON.h"
    ],
    hdrs = ["libjson_s7.h"], # "cJSON.h"],
    deps  = DEPS + [
        "//lib:utils",
        # "//src:s7_archive",
        "//vendored/cjson",
        ":cjson_map", "cjson_array"
    ],
    # + select({
    #     "//config/profile:dev?": ["//dev"],
    #     "//config/profile:test?": ["//dev"],
    #     "//conditions:default":  []
    # }),
    copts = COPTS + CLIB_COPTS + INCLUDE_PATHS + [
        # "-Idev",
        # "-Iexternal/libs7/dev",
        "-Ilib",
        "-Iexternal/libs7/lib",
        "-Ilib/libjson",
        "-Iexternal/libs7/lib/libjson",
        # "-Ivendored/logc",
        # "-Iexternal/libs7/vendored/logc",
        "-Ivendored/cjson",
        "-Iexternal/libs7/vendored/cjson",
    ],
    linkopts      = LINKOPTS,
    local_defines = DEFINES
)

cc_binary(
    name  = "json_s7",  # create libjson_s7.{dylib,so}
    linkshared = True,
    srcs  = SRCS + [
        ":libcjson_s7.c",
        ":libcjson_s7.h",
        # "//src:s7.h",
        "//lib:utils.h",
        "//lib:utils.c",
    ],
    deps  = DEPS + ["//lib:utils", "//vendored/cjson"],
    copts = COPTS + CLIB_COPTS + INCLUDE_PATHS + [
        "-Ilib", "-Iexternal/libs7/lib",
        "-Ivendored/cjson",
        "-Iexternal/libs7/vendored/cjson",
    ],
    linkopts      = LINKOPTS,
    local_defines = DEFINES
)

# clibgen_runner(
#     name = "libcjson_s7_runbin",
#     tool = "//lib:clibgen",
#     args = ["--script", "lib/libjson/libcjson_clibgen.scm"],
#     srcs = [":libcjson_clibgen.scm", "//lib:clibgen.scm"],
#     outs = [":libcjson_s7.c"]
# )

################################################################
cc_library(
    name  = "cjson_array",
    linkstatic = True,
    alwayslink = True, # ensure init fn sym available for dlsym
    srcs  = SRCS + [
        "cjson_array_s7.c", # "cjson_array_s7.h",
        "libcjson_s7.h",
        # "libjson_s7.h",
        # "cJSON.h"
    ],
    deps  = DEPS + [
        "//vendored/cjson",
        "//src:s7_archive",
    ],
    copts = COPTS + CLIB_COPTS + INCLUDE_PATHS + [
        # "-Ivendored/logc",
        # "-Iexternal/libs7/vendored/logc",
        "-Ivendored/cjson",
        "-Iexternal/libs7/vendored/cjson"
    ],
    linkopts      = LINKOPTS,
    local_defines = DEFINES
)

cc_library(
    name  = "cjson_map",
    linkstatic = True,
    alwayslink = True, # ensure init fn sym available for dlsym
    srcs  = SRCS + [
        "cjson_map_s7.c",
        # "libjson_s7.h",
        "libcjson_s7.h",
        # "cJSON.h"
    ],
    deps  = DEPS + [
        "//vendored/cjson",
        "//src:s7_archive",
    ],
    copts = COPTS + CLIB_COPTS + INCLUDE_PATHS + [
        # "-Ivendored/logc",
        # "-Iexternal/libs7/vendored/logc",
        "-Ivendored/cjson",
        "-Iexternal/libs7/vendored/cjson",
    ],
    linkopts      = LINKOPTS,
    local_defines = DEFINES
)

