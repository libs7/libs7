cc_library(
    name  = "c_s7", # emits libc_s7.a
    linkstatic = 1,
    srcs  = ["libc_s7.c", "//src:s7.h"],
    # hdrs = ["//src:s7_header"],
    # deps = ["//src:s7_header"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        # "-I.",

        "-Isrc",
        "-Iexternal/libs7/src",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "-fPIC",
            "-Wl,--no-undefined",
            "-Wpedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]), # + ["s7.h"],
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

cc_binary(
    name  = "libc_s7.so",  # create libc_s7.so
    linkshared = True,
    srcs  = ["libc_s7.c", "//src:s7.h"],
    # deps  = [":s7"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
        "-Iexternal/libs7/src",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "--pedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    defines = [
        "WITH_SYSTEM_EXTRAS"
    ],
    linkopts = select({
        "//config/host:macos": [],
        "//config/host:linux": ["-ldl", "-Wl,-export-dynamic"],
        "//conditions:default": []
    }) + [
        "-lm"
    ],
    visibility = ["//visibility:public"]
)

genrule(
    name = "libc_s7_cgen",
    srcs = [":libc_cgen.scm", ":cgen.scm"],
    outs = ["libc_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libc_cgen.scm) ;",
        "cp libc_s7.c $@ ;"
    ])
)

################################################################
cc_library(
    name  = "dl_s7",  # libdl_s7.a
    linkstatic = True,
    srcs  = ["libdl_s7.c", "//src:s7.h"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
        "-Iexternal/libs7/src",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "--pedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]),
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

genrule(
    name = "libdl_s7_cgen",
    srcs = [":libdl_cgen.scm", ":cgen.scm"],
    outs = ["libdl_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libdl_cgen.scm) ;",
        "cp libdl_s7.c $@ ;"
    ])
)

################################################################
cc_library(
    name  = "m_s7",
    # linkstatic = 0,
    srcs  = ["libm_s7.c", "//src:s7.h"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
        "-Iexternal/libs7/src",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "--pedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]),
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

genrule(
    name = "libm_s7_cgen",
    srcs = [":libm_cgen.scm", ":cgen.scm"],
    outs = ["libm_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libm_cgen.scm) ;",
        "cp libm_s7.c $@ ;"
    ])
)

################################################################
cc_library(
    name  = "utf8proc_s7",
    # linkstatic = 0,
    srcs  = ["libutf8proc_s7.c", "//src:s7.h"],
    deps  = ["@utf8proc//:utf8proc"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
        "-Iexternal/libs7/src",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "--pedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]),
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

genrule(
    name = "libutf8proc_s7_cgen",
    srcs = [":libutf8proc_cgen.scm", ":cgen.scm"],
    outs = ["libutf8proc_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libutf8proc_cgen.scm) ;",
        "cp libutf8proc_s7.c $@ ;"
    ])
)

################################################################
# # FIXME: depends on libgdbm
cc_library(
    name  = "gdbm_s7",
    # linkstatic = 0,
    srcs  = ["libgdbm_s7.c", "//src:s7.h"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
        "-Iexternal/libs7/src",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "--pedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]),
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

genrule(
    name = "libgdbm_s7_cgen",
    srcs = [":libgdbm_cgen.scm", ":cgen.scm"],
    outs = ["libgdbm_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libgdbm_cgen.scm) ;",
        "cp libgdbm_s7.c $@ ;"
    ])
)

################################################################
cc_library(
    name  = "gsl_s7",
    linkstatic = True,
    srcs  = ["libgsl_s7.c", "//src:s7.h"],
    deps  = ["@libgsl//:libgsl"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
        "-Iexternal/libs7/src",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "--pedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]),
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

genrule(
    name = "libgsl_s7_cgen",
    srcs = [":libgsl_cgen.scm", ":cgen.scm"],
    outs = ["libgsl_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libgsl_cgen.scm) ;",
        "cp libgsl_s7.c $@ ;"
    ])
)

################################################################
## cgen - builds s7 batch processor, for processing cgen.scm to
## generate c sources.
################################################################
cc_binary(
    name  = "cgen",
    srcs  = ["cgen.c"],
    deps = ["//src:s7", "//vendored/logc", "//vendored/uthash"],
    data = [
        "//scm:srcs",
        # ":libcgen.scm",
        ":cgen.scm"
    ],
    copts =  [
        "-Wall",
        "-Wextra",
        # "-Werror=pedantic",
        # "-pedantic-errors",

        "-Isrc",
        "-Iexternal/libs7/src",

        "-Ivendored/logc",
        "-Iexternal/libs7/vendored/logc",

        "-Ivendored/uthash",
        "-Iexternal/libs7/vendored/uthash"
    ] + select({
        # "//:bsd": ["-std=c11"],
        "//:macos": ["-std=c11"],
        "//:linux": [
            "-std=c11",
            "-Wl,export-dynamic",
            ],
        # "//:linux_clang": [
        #     "-std=c11",
        #     "-fPIC",
        #     "-Wl,export-dynamic",
        #     ],
        "//conditions:default": ["-std=c11"],
    }),
    linkopts = select({
        # "//:bsd": ["-Wl,-export-dynamic"],
        "//:macos": [],
        "//:linux": ["-ldl", "-lm", "-Wl,-export-dynamic"],
        # "//:linux_clang": ["-ldl", "-Wl,-export-dynamic"],
        "//conditions:default": []
    }) + [
        # "-lm",
    ],
    visibility = ["//visibility:public"]
)

# compiled separately instead of #included in nrepl.c
cc_library(
    name = "notcurses_s7",
    srcs = [
        "notcurses_s7.c",
        "//src:s7.h"
    ],
    deps = [
        "@libdeflate//:libdeflate",
        "@notcurses//:notcurses"
    ],
    copts = select({
        # strdup is non-standard, not supported on linux in strict c11 mode
        "//config/host:macos": ["-std=c11"],
        "//config/host:linux": ["-std=gnu11", "-Wl,-export-dynamic"],
        "//conditions:default": ["-std=c11"],
    }) + [
        "-Wextra",
        "-Wno-unused-parameter",
        # "-Ivendored/linenoise",
        "-O2", "-g",

        "-I.",
        "-Isrc",
        "-Iexternal/libs7/src",

        # "-Ivendored/linenoise",
        "-Iexternal/notcurses/notcurses/include",
    ],
    visibility = ["//visibility:public"]
)
