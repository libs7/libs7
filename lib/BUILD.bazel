genrule(
    name = "libc_s7_cgen",
    srcs = [":libc_cgen.scm", ":cgen.scm"],
    outs = ["libc_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libc_cgen.scm) ;",
        "cp libc_s7.c $@ ;"
    ]),
    visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libcwalk_s7_cgen",
    srcs = [":libcwalk_cgen.scm", ":cgen.scm"],
    outs = ["libcwalk_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libcwalk_cgen.scm) ;",
        "cp libcwalk_s7.c $@ ;"
    ]),
    visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libdl_s7_cgen",
    srcs = [":libdl_cgen.scm", ":cgen.scm"],
    outs = ["libdl_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libdl_cgen.scm) ;",
        "cp libdl_s7.c $@ ;"
    ]),
    visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libm_s7_cgen",
    srcs = [":libm_cgen.scm", ":cgen.scm"],
    outs = ["libm_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libm_cgen.scm) ;",
        "cp libm_s7.c $@ ;"
    ]),
    visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libutf8proc_s7_cgen",
    srcs = [":libutf8proc_cgen.scm", ":cgen.scm"],
    outs = ["libutf8proc_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libutf8proc_cgen.scm) ;",
        "cp libutf8proc_s7.c $@ ;"
    ]),
    visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libgdbm_s7_cgen",
    srcs = [":libgdbm_cgen.scm", ":cgen.scm"],
    outs = ["libgdbm_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libgdbm_cgen.scm) ;",
        "cp libgdbm_s7.c $@ ;"
    ]),
    visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libgsl_s7_cgen",
    srcs = [":libgsl_cgen.scm", ":cgen.scm"],
    outs = ["libgsl_s7.c"],
    tools = [":cgen"],
    cmd  = "\n".join([
        "$(execpath :cgen) $(location :libgsl_cgen.scm) ;",
        "cp libgsl_s7.c $@ ;"
    ]),
    visibility = ["//lib:__subpackages__"]
)

################################################################
## cgen - builds s7 batch processor, for processing cgen.scm to
## generate c sources.
################################################################
cc_binary(
    name  = "cgen",
    srcs  = ["cgen.c"],
    deps = ["//src:s7", "//vendored/logc", "//vendored/uthash"],
    data = [
        "//scm:srcs",
        # ":libcgen.scm",
        ":cgen.scm"
    ],
    copts =  [
        "-Wall",
        "-Wextra",
        # "-Werror=pedantic",
        # "-pedantic-errors",

        "-Isrc",
        "-Iexternal/libs7/src",

        "-Ivendored/logc",
        "-Iexternal/libs7/vendored/logc",

        "-Ivendored/uthash",
        "-Iexternal/libs7/vendored/uthash"
    ] + select({
        # "//:bsd": ["-std=c11"],
        "//:macos": ["-std=c11"],
        "//:linux": [
            "-std=c11",
            "-Wl,export-dynamic",
            ],
        # "//:linux_clang": [
        #     "-std=c11",
        #     "-fPIC",
        #     "-Wl,export-dynamic",
        #     ],
        "//conditions:default": ["-std=c11"],
    }),
    defines = [
    ] + select({
        "//:linux": [
            "_POSIX_C_SOURCE=200809L" # strndup
        ],
        "//conditions:default": []
    }),
    linkopts = select({
        # "//:bsd": ["-Wl,-export-dynamic"],
        "//:macos": [],
        "//:linux": ["-ldl", "-lm", "-Wl,-export-dynamic"],
        # "//:linux_clang": ["-ldl", "-Wl,-export-dynamic"],
        "//conditions:default": []
    }) + [
        # "-lm",
    ],
    visibility = ["//visibility:public"]
)
