package(default_visibility = ["//visibility:public"])

exports_files(["libm.scm"])

load("//lib:BUILD.bzl",
     "CLIB_COPTS", "CLIB_LINKOPTS", "CLIB_DEFINES")

################################################################
# cc_library(
#     name  = "c_s7_static", # emits libc_s7_static.a
#     linkstatic = 1,
#     srcs  = ["//lib:libc_s7.c", "//src:s7.h"],
#     hdrs  = ["//lib:libc_s7.h"],
#     copts = CLIB_COPTS,
#     linkopts = CLIB_LINKOPTS,
#     defines = CLIB_DEFINES,
# )

# cc_binary(
#     name  = "c_s7",  # create libc_s7.{dylib,so}
#     linkshared = True,
#     srcs  = ["//lib:libc_s7.c", "//src:s7.h"],
#     copts = CLIB_COPTS,
#     linkopts = CLIB_LINKOPTS,
#     defines = CLIB_DEFINES,
# )

# genrule( ## C source generation
#     name = "libc_s7_clib",
#     srcs = [":libc_clibgen.scm", ":clibgen.scm"],
#     outs = ["libc_s7.c", "libc_s7.h"],
#     tools = [":clibgen"],
#     cmd  = "\n".join([
#         "$(execpath :clibgen) $(location :libc_clibgen.scm) ;",
#         "cp libc_s7.c $(RULEDIR)/ ;",
#         "cp libc_s7.h $(RULEDIR)/ ;"
#     ]),
#     # visibility = ["//lib:__subpackages__"]
# )

################################################################
genrule(
    name = "libcwalk_s7_clib",
    srcs = [":libcwalk_clib.scm", ":clibgen.scm"],
    outs = ["libcwalk_s7.c", "libcwalk_s7.h"],
    tools = [":clibgen"],
    cmd  = "\n".join([
        "$(execpath :clibgen) $(location :libcwalk_clib.scm) ;",
        "cp libcwalk_s7.c $(RULEDIR)/ ;",
        "cp libcwalk_s7.h $(RULEDIR)/ ;"
    ]),
    # visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libdl_s7_clib",
    srcs = [":libdl_clib.scm", ":clibgen.scm"],
    outs = ["libdl_s7.c", "libdl_s7.h"],
    tools = [":clibgen"],
    cmd  = "\n".join([
        "$(execpath :clibgen) $(location :libdl_clib.scm) ;",
        "cp libdl_s7.c $(RULEDIR)/ ;",
        "cp libdl_s7.h $(RULEDIR)/ ;"
    ]),
    # visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libm_s7_clib",
    srcs = [":libm_clib.scm", ":clibgen.scm"],
    outs = ["libm_s7.c", "libm_s7.h"],
    tools = [":clibgen"],
    cmd  = "\n".join([
        "$(execpath :clibgen) $(location :libm_clib.scm) ;",
        "cp libm_s7.c $(RULEDIR)/ ;",
        "cp libm_s7.h $(RULEDIR)/ ;"
    ]),
    # visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libutf8proc_s7_clib",
    srcs = [":libutf8proc_clib.scm", ":clibgen.scm"],
    outs = ["libutf8proc_s7.c", "libutf8proc_s7.h"],
    tools = [":clibgen"],
    cmd  = "\n".join([
        "$(execpath :clibgen) $(location :libutf8proc_clib.scm) ;",
        "cp libutf8proc_s7.c $(RULEDIR)/ ;",
        "cp libutf8proc_s7.h $(RULEDIR)/ ;"
    ]),
    # visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libgdbm_s7_clib",
    srcs = [":libgdbm_clib.scm", ":clibgen.scm"],
    outs = ["libgdbm_s7.c", "libgdbm_s7.h"],
    tools = [":clibgen"],
    cmd  = "\n".join([
        "$(execpath :clibgen) $(location :libgdbm_clib.scm) ;",
        "cp libgdbm_s7.c $(RULEDIR)/ ;",
        "cp libgdbm_s7.h $(RULEDIR)/ ;"
    ]),
    # visibility = ["//lib:__subpackages__"]
)

genrule(
    name = "libgsl_s7_clib",
    srcs = [":libgsl_clib.scm", ":clibgen.scm"],
    outs = ["libgsl_s7.c", "libgsl_s7.h"],
    tools = [":clibgen"],
    cmd  = "\n".join([
        "$(execpath :clibgen) $(location :libgsl_clib.scm) ;",
        "cp libgsl_s7.c $(RULEDIR)/ ;",
        "cp libgsl_s7.h $(RULEDIR)/ ;"
    ]),
    # visibility = ["//lib:__subpackages__"]
)

################################################################
## clib - builds s7 batch processor, for processing clib.scm to
## generate c sources.
################################################################
cc_binary(
    name  = "clibgen",
    srcs  = ["clibgen.c"],
    deps = ["//src:s7", "//vendored/logc", "//vendored/uthash"],
    data = [
        "//scm:srcs",
        # ":libclib.scm",
        ":clibgen.scm"
    ],
    copts =  [
        "-Wall",
        "-Wextra",
        # "-Werror=pedantic",
        # "-pedantic-errors",

        "-Isrc",
        "-Iexternal/libs7/src",

        "-Ivendored/logc",
        "-Iexternal/libs7/vendored/logc",

        "-Ivendored/uthash",
        "-Iexternal/libs7/vendored/uthash"
    ] + select({
        # "//:bsd": ["-std=c11"],
        "//:macos": ["-std=c11"],
        "//:linux": [
            "-std=c11",
            "-Wl,export-dynamic",
            ],
        # "//:linux_clang": [
        #     "-std=c11",
        #     "-fPIC",
        #     "-Wl,export-dynamic",
        #     ],
        "//conditions:default": ["-std=c11"],
    }),
    defines = [
    ] + select({
        "//:linux": [
            "_POSIX_C_SOURCE=200809L" # strndup
        ],
        "//conditions:default": []
    }),
    linkopts = select({
        # "//:bsd": ["-Wl,-export-dynamic"],
        "//:macos": [],
        "//:linux": ["-ldl", "-lm", "-Wl,-export-dynamic"],
        # "//:linux_clang": ["-ldl", "-Wl,-export-dynamic"],
        "//conditions:default": []
    }) + [
        # "-lm",
    ],
    # visibility = ["//visibility:public"]
)

################################################################
## experimental, does not yet work:
cc_library(
    name  = "system_extras_s7",
    linkstatic = 1,
    srcs  = ["system_extras.c", "//src:s7.h"],
    hdrs  = ["system_extras.h"],
    deps  = ["//vendored/logc"],
    copts = CLIB_COPTS + [
        "-Ivendored/logc", "-Iexternal/libs7/vendored/logc"],
    linkopts = CLIB_LINKOPTS,
    defines = CLIB_DEFINES,
)
