load("@rules_cc//cc:defs.bzl", "cc_library", "cc_shared_library")
load("@makeheaders//rules:makeheaders.bzl", "makeheaders")

load("//config/cc:CONFIG.bzl",
     "BASE_SRCS", "BASE_DEPS", "BASE_INCLUDE_PATHS",
     "BASE_COPTS",
     "BASE_DEFINES", "LOCAL_DEFINES",
     "BASE_LINKOPTS",
     "define_module_version")

SRCS          = BASE_SRCS
DEPS          = BASE_DEPS + [
    "@runfiles//lib:runfiles",
    "@uthash//lib:uthash",
    # "@bazel_tools//tools/cpp/runfiles"
]
INCLUDE_PATHS = BASE_INCLUDE_PATHS
COPTS         = BASE_COPTS + [
    "-Wno-unused-parameter",
] + INCLUDE_PATHS
DEFINES       = BASE_DEFINES
LOCAL_DEFINES = LOCAL_DEFINES + [
    # "LOCAL_REPO=\\\"{}\\\"".format(repository_name()[1:]),
    # "LIBS7_REPO=\\\"{}\\\"".format(package_relative_label("@libs7").repo_name),
    # "REPO_NAME=\\\"{}\\\"".format(repo_name()),
    # "PKGNM=\\\"{}\\\"".format(package_name()),
    # "PRLBL=\\\"{}\\\"".format(package_relative_label(package_name())),
    ## package_relative_label("@libs7").repo_name
    "BAZEL_CURRENT_REPOSITORY=\\\"{}\\\"".format(repo_name()),
] + define_module_version()
LINKOPTS      = BASE_LINKOPTS
# TOOLCHAINS    = ["//:module_profiles"]

# WITH_SYSTEM_EXTRAS
  # is_directory_symbol, file_exists_symbol, delete_file_symbol,
  # getenv_symbol, system_symbol,
  # directory_to_list_symbol,
  # file_mtime_symbol

# used in s7.c only:
# WITH_MAIN - enables main() for std repl

# WITH_NOTCURSES - if also WITH_MAIN, includes nrepl.c and excludes
# std repl code, and loads nrepl.scm in s7_repl.
# if WITH_MAIN && WITH_NOTCURSES
#     #include nrepl.c,

###########
cc_library( # delivers libs7.lo
    name  = "s7",
    linkstatic = True,
    alwayslink = True,
    srcs  = SRCS + [
        "fs_api.c", # FIXME: replace with cwalk
        "s7.c", "s7.h", # FIXME: use makeheaders
        "libs7.c",
        ":mkhdrs",
    ] + select({
        "@obazl_config_cc//profile:dev?": [
            "debug_s7.c"
        ],
        "//conditions:default": []
    }),
    implementation_deps  = DEPS,
    hdrs  = ["libs7.h"],
    includes = ["."],
    copts = COPTS + select({
        # allow for warnings in s7.c
        "@platforms//os:macos": [
            "-Wno-format-pedantic",
            "-Wno-gnu-statement-expression",
        ],
        "@platforms//os:linux": [
            "-Wno-implicit-fallthrough"
        ],
        "//conditions:default": []
    }),
    data = [
        "//scm:srcs",
        "//scm/srfi:srcs",
        "//scm/s7:srcs",
        # "s7.h"
    ],
    defines = DEFINES,
    local_defines = LOCAL_DEFINES + [
        "WITH_SYSTEM_EXTRAS",
        "WITH_C_LOADER"
        # FIXME: if --//config:notcurses
        # "WITH_MAIN",
        # "WITH_NOTCURSES"
    ],
    linkopts = LINKOPTS,
    # toolchains = TOOLCHAINS,
    visibility = ["//visibility:public"]
)

##################
cc_shared_library(
    name = "s7_dso",
    shared_lib_name = select({
        "@platforms//os:macos": "libs7.dylib",
        "@platforms//os:linux": "libs7.so",
        # "@platforms//os:windows": "libs7.dll",
        "//conditions:default": "libs7.so"
    }),
    deps = [":s7"],
    visibility = ["//visibility:public"]
)

############
makeheaders(
    name = "mkhdrs",
    hdrs_renamed = {"libs7.c": "libs7_internal.h"},
    hdrs_srcs = select({
        "@obazl_config_cc//profile:dev?": [
            "debug_s7.c"
        ],
        "//conditions:default": []
    }),
    additional_srcs = [
        "s7.h", "fs_api.c",
        "@liblogc//macros:ansi_colors.h"
    ] + select({
        "@obazl_config_cc//profile:dev?": [
            "//macros:s7_logging_debug.h",
            "@liblogc//macros:logging_debug.h"
        ],
        # special case: built as tool, transitioned to opt
        # "@liblogc//compilation_mode:opt": [
        #     "@liblogc//macros:logging_debug.h"
        # ],
        "//conditions:default": [
            "//macros:s7_logging_ndebug.h",
            "@liblogc//macros:logging_ndebug.h"
        ]
    }),
)

makeheaders(
    name = "mkhdrs_export",
    out ="libs7.h",
    export_interface = True,
    hdrs_srcs = ["libs7.c"],
    additional_srcs = ["s7.h", "fs_api.c"],
    visibility = ["//visibility:public"]
)
