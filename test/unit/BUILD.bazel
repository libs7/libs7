load("@rules_cc//cc:defs.bzl", "cc_library")

load("//:BUILD.bzl",
     "BASE_SRCS", "BASE_DEPS", "BASE_INCLUDE_PATHS",
     "BASE_COPTS", "BASE_DEFINES", "BASE_LINKOPTS")

load("//test:BUILD.bzl",
     "TEST_SRCS", "TEST_DEPS", "TEST_INCLUDE_PATHS",
     "TEST_COPTS", "TEST_DEFINES", "TEST_LINKOPTS",
     "TIMEOUT")

SRCS          = BASE_SRCS + TEST_SRCS
INCLUDE_PATHS = BASE_INCLUDE_PATHS + TEST_INCLUDE_PATHS
COPTS         = BASE_COPTS + TEST_COPTS + INCLUDE_PATHS
DEPS          = BASE_DEPS + TEST_DEPS
DEFINES       = BASE_DEFINES + TEST_DEFINES
LINKOPTS      = BASE_LINKOPTS + TEST_LINKOPTS

################################################################
LIBC_COPTS = [
    "-I$(GENDIR)/lib/libc",
    "-I$(GENDIR)/external/libs7/lib/libc",
    "-I$(GENDIR)/lib/libdl",
    "-I$(GENDIR)/external/libs7/lib/libdl",
    "-I$(GENDIR)/lib/libgdbm",
    "-I$(GENDIR)/external/libs7/lib/libgdbm",
    "-I$(GENDIR)/lib/libm",
    "-I$(GENDIR)/external/libs7/lib/libm",
]



exports_files(["common.c", "common.h"])

test_suite(
    name  = "unit",
    tests = [
        ":s7",
        ":libc_link_archive",
        # ":libc_link_shared", #FIXME
        # ":libc_link_runtime", #FIXME
        ":gdbm_link_archive",
        # ":gdbm_link_shared", #FIXME
        # ":gdbm_link_runtime", #FIXME
        # ":gsl", ## takes too long to build for one trivial test
        ":cwalk",
        ":utf8proc",
        "//test/unit/libjson",
        "//test/unit/libmustachios",
        "//test/unit/libsexp",
        "//test/unit/libtoml",
    ]
)

################################################################

## WARNING WARNING - if linkstatic is not True, then the runtime
## linker may pick up system shared libs rather than those listed as
## deps here. This can be true even for static deps, e.g.
## libgbdm_s7_archive, which is statically linked to libgdbm.a - at
## runtime the system libgbdm.so may be loaded.

## linkstatic=True means (for cc_test): "all user libraries are linked
## statically (if a static version is available), but system
## libraries (excluding C/C++ runtime libraries) are linked
## dynamically,"

## linkstatic=False means "all libraries are linked dynamically (if a
## dynamic version is available)". Which evidently means you can build
## against a static lib dependency, but the runtime linker may find a
## shared system lib, effectively overriding the dep you want. (This
## has happened with libgdbm, where we built with 1.23, but at runtime
## the gdbm_version string reported 1.18.0, which meant it was
## (evidently) coming from the locally installed dso
## (/usr/lib/x86_64-linux-gnu/libgdbm.so.6)

################################################################
## s7 api tests extracted from ffitest.c
cc_test(
    name       = "s7",
    linkstatic = True,
    srcs       = SRCS + ["s7_test.c"],
    defines    = DEFINES,
    deps       = DEPS,
    copts      = COPTS,
    linkopts   = LINKOPTS,
    timeout    = TIMEOUT,
)


################################################################
cc_test(
    name = "libc",
    linkstatic = True,
    srcs = SRCS + ["libc_test.c"] + select({
        "//config/clibs/link:shared?": [
            "//lib/libc:c_s7"   # shared lib
            # "//lib/libc:libc_s7.c", "//lib/libc:libc_s7.h",
        ],
        "//conditions:default": []
    }),
    deps = DEPS + select({
        "//config/clibs/link:archive?": ["//lib/libc:c_s7_archive"],
        "//conditions:default": ["//lib/libc:c_s7_archive"],
    }),
    copts = COPTS + [
        "-Isrc",
        "-I$(GENDIR)/lib/libc",
        "-I$(GENDIR)/external/libs7/lib/libc",
    ],
    data = select({
        "//config/clibs/link:runtime?": ["//lib/libc:c_s7"],
        "//conditions:default": []
    }),
    local_defines = DEFINES,
    linkopts = LINKOPTS,
    timeout  = TIMEOUT,
)

cc_test(
    name = "libc_link_archive",
    linkstatic = True,
    srcs = SRCS + ["libc_test.c"],
    local_defines = DEFINES,
    deps = DEPS + [
        "//lib/libc:c_s7_archive",
        # "//lib/libdl:dl_s7_archive",
        # "//lib/libgdbm:gdbm_s7_archive",
        # "//lib/libm:m_s7_archive",
    ],
    copts = COPTS + LIBC_COPTS,
    linkopts = LINKOPTS,
    timeout  = TIMEOUT,
)

cc_test(
    name = "libc_link_shared",
    # linkstatic = True,
    srcs = SRCS + ["libc_test.c"],
    local_defines = DEFINES,
    deps = DEPS + ["//lib/libc:c_s7"],
    copts = COPTS + LIBC_COPTS,
    linkopts = LINKOPTS,
    timeout  = TIMEOUT,
)

cc_test(
    name = "libc_link_runtime",
    linkstatic = True,
    srcs = SRCS + ["libc_test.c"],
    local_defines = DEFINES + ["CLIBS_LINK_RUNTIME"],
    deps = DEPS,
    data = [
        "//lib/libc:c_s7",
        # "//lib/libdl:dl_s7",
        # "//lib/libgdbm:gdbm_s7",
        # "//lib/libm:m_s7",
    ],
    copts = COPTS + LIBC_COPTS,
    linkopts = LINKOPTS,
    timeout  = TIMEOUT,
)

################################################################
cc_test(
    name = "libm",
    linkstatic = True,
    srcs = SRCS + ["libm_test.c"] + select({
        "//config/clibs/link:shared?": [
            "//lib/libm:m_s7.c" # , "//lib/libm:libm_s7.h",
        ],
        "//conditions:default": []
    }),
    local_defines = DEFINES,
    deps = DEPS + select({
        "//config/clibs/link:archive?": ["//lib/libm:m_s7_archive"],
        "//conditions:default": []
    }),
    data = select({
        "//config/clibs/link:runtime?": [
            "//lib/libm:m_s7"
        ],
        "//conditions:default": []
    }),
    copts = COPTS + [
        "-I$(GENDIR)/lib/libm",
        "-I$(GENDIR)/external/libs7/lib/libm",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

cc_test(
    name = "libm_link_archive",
    linkstatic = True,
    srcs = SRCS + ["libm_test.c"],
    local_defines = DEFINES,
    deps = DEPS + ["//lib/libm:m_s7_archive"],
    copts = COPTS + [
        "-I$(GENDIR)/lib/libm",
        "-I$(GENDIR)/external/libs7/lib/libm",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

cc_test(
    name = "libm_link_shared",
    linkstatic = True,
    srcs = SRCS + [
        "libm_test.c",
        "//lib/libm:m_s7.c" # , "//lib/libm:libm_s7.h",
    ],
    local_defines = DEFINES,
    deps = DEPS,
    copts = COPTS + [
        "-I$(GENDIR)/lib/libm",
        "-I$(GENDIR)/external/libs7/lib/libm",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

cc_test(
    name = "libm_link_runtime",
    linkstatic = True,
    srcs = SRCS + ["libm_test.c"],
    local_defines = DEFINES + ["CLIBS_LINK_RUNTIME"],
    deps = DEPS,
    data = ["//lib/libm:m_s7"],
    copts = COPTS + [
        "-I$(GENDIR)/lib/libm",
        "-I$(GENDIR)/external/libs7/lib/libm",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

################################################################
cc_test(
    name = "gdbm",
    linkstatic = True,
    srcs = SRCS + ["gdbm_test.c"] + select({
        # "//config/clibs/link:loadtime?": [
        "//config/clibs/link:shared?": [
            "//lib/libgdbm:gdbm_s7.c"  # , "//lib/libgdbm:libgdbm_s7.h",
        ],
        "//conditions:default": []
    }),
    local_defines = DEFINES,
    deps = DEPS + select({
        "//config/clibs/link:archive?": ["//lib/libgdbm:gdbm_s7"],
        "//conditions:default": []
    }),
    data = select({
        "//config/clibs/link:runtime?": [
            "//lib/libgdbm:gdbm_s7"
        ],
        "//conditions:default": []
    }),
    copts = COPTS + [
        "-I$(GENDIR)/lib/libgdbm",
        "-I$(GENDIR)/external/libs7/lib/libgdbm",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

cc_test(
    name = "gdbm_link_archive",
    linkstatic = True,
    srcs = SRCS + ["gdbm_test.c"],
    local_defines = DEFINES,
    deps = DEPS + ["//lib/libgdbm:gdbm_s7"],
    copts = COPTS + [
        "-I$(GENDIR)/lib/libgdbm",
        "-I$(GENDIR)/external/libs7/lib/libgdbm",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

# cc_test(
#     name = "gdbm_link_shared",
#     linkstatic = True,
#     srcs = SRCS + [
#         "gdbm_test.c",
#         # "//lib/libgdbm:gdbm_s7.c" ## , "//lib/libgdbm:libgdbm_s7.h",
#     ],
#     local_defines = DEFINES,
#     deps = DEPS + ["//lib/libgdbm:gdbm_s7"],
#     copts = COPTS + [
#         "-I$(GENDIR)/lib/libgdbm",
#         "-I$(GENDIR)/external/libs7/lib/libgdbm",
#     ],
#     linkopts = LINKOPTS,
#     timeout = TIMEOUT
# )

# cc_test(
#     name = "gdbm_link_runtime",
#     linkstatic = True,
#     srcs = SRCS + ["gdbm_test.c"],
#     local_defines = DEFINES + ["CLIBS_LINK_RUNTIME"],
#     deps = DEPS,
#     data = ["//lib/libgdbm:gdbm_s7"],
#     copts = COPTS + [
#         "-I$(GENDIR)/lib/libgdbm",
#         "-I$(GENDIR)/external/libs7/lib/libgdbm",
#     ],
#     linkopts = LINKOPTS,
#     timeout = TIMEOUT
# )

################################################################
cc_test(
    name = "gsl",
    linkstatic = True,
    srcs = SRCS + ["gsl_test.c"] + select({
        "//config/clibs/link:shared?": ["//lib/libgsl:gsl_s7.c"],
        "//conditions:default": []
    }),
    local_defines = DEFINES,
    deps = DEPS + select({
        "//config/clibs/link:archive?": ["//lib/libgsl:gsl_s7_archive"],
        "//conditions:default": []
    }),
    data = select({
        "//config/clibs/link:runtime?": ["//lib/libgsl:gsl_s7"],
        "//conditions:default": []
    }),
    copts = COPTS + [
        "-I$(GENDIR)/lib/libgsl",
        "-I$(GENDIR)/external/libs7/lib/libgsl",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

################################################################
cc_test(
    name = "cjson",
    linkstatic = True,
    srcs = SRCS + ["cjson_test.c"] + select({
        "//config/clibs/link:shared?": [
            "//lib/libmustachios:mustachios7_s7.c" ## , "//lib/libmustachios:libmustachios7_s7.h",
        ],
        "//conditions:default": []
    }),
    local_defines = DEFINES,
    deps = DEPS + select({
        "//config/clibs/link:archive?": [
            "//lib/libmustachios:mustache_s7_archive"
        ],
        "//conditions:default": []
    }),
    data = select({
        "//config/clibs/link:runtime?": [
            "//lib/libmustachios:mustachios7_s7"
        ],
        "//conditions:default": []
    }),
    copts = COPTS + [
        "-Ilib/libmustachios",
        "-Iexternal/libs7/lib/libmustachios",
        "-Iexternal/mustachios7/lib",
        "-Iexternal/mustachios7/vendored/cjson",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

################################################################
cc_test(
    name = "cwalk",
    linkstatic = True,
    srcs = SRCS + ["cwalk_test.c"] + select({
        # "//config/clibs/linktime:load?": [
        "//config/clibs/link:shared?": [
            "//lib/libcwalk:cwalk_s7.c" ## , "//lib/libcwalk:libcwalk_s7.h",
        ],
        "//conditions:default": []
    }),
    local_defines = DEFINES,
    deps = DEPS + select({
        # "//config/clibs/linktime:build?": [
        "//config/clibs/link:archive?": [
            "//lib/libcwalk:cwalk_s7"],
        # "//config/clibs/linktime:load?": [
        #     "//lib/libcwalk:cwalk_s7_dso"],
        "//conditions:default": []
    }),
    data = select({
        # "//config/clibs/linktime:run?": [
        "//config/clibs/link:runtime?": [
            "//lib/libcwalk:cwalk_s7_dso"
        ],
        "//conditions:default": []
    }),
    copts = COPTS + [
        "-I$(GENDIR)/lib/libcwalk",
        "-I$(GENDIR)/external/libs7/lib/libcwalk",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

cc_test(
    name = "cwalk_link_archive",
    linkstatic = True,
    srcs = SRCS + ["cwalk_test.c"],
    local_defines = DEFINES,
    deps = DEPS + ["//lib/libcwalk:cwalk_s7_archive"],
    copts = COPTS + LIBC_COPTS,
    linkopts = LINKOPTS,
    timeout  = TIMEOUT,
)

cc_test(
    name = "cwalk_link_shared",
    linkstatic = True,
    srcs = SRCS + ["cwalk_test.c"],
    local_defines = DEFINES,
    deps = DEPS + ["//lib/libcwalk:cwalk_s7"],
    copts = COPTS, # + LIBC_COPTS,
    linkopts = LINKOPTS,
    timeout  = TIMEOUT,
)

################################################################
cc_test(
    name = "toml",
    linkstatic = True,
    srcs = SRCS + ["toml_test.c"] + select({
        "//config/clibs/link:shared?": [
            "//lib/libtoml:toml_s7.c"
        ],
        "//conditions:default": []
    }),
    local_defines = DEFINES,
    deps = DEPS + select({
        "//config/clibs/link:archive?": [
            # "//src:s7",
            "//lib/libtoml:toml_s7_archive"
        ],
        "//conditions:default": []
    }),
    data = select({
        "//config/clibs/link:runtime?": [
            "//lib/libtoml:toml_s7"
        ],
        "//conditions:default": []
    }),
    copts = COPTS + [
        "-I$(GENDIR)/lib/libtoml",
        "-I$(GENDIR)/external/libs7/lib/libtoml",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

cc_test(
    name = "toml_archive",
    linkstatic = True,
    srcs = SRCS + ["toml_test.c",
            ## "//src:libs7.h"
            ],
    local_defines = DEFINES,
    deps = DEPS + [
        "//dev",
        # "//src:s7",
        "//lib/libtoml:toml_s7_archive"
    ],
    copts = COPTS + [
        "-Isrc",
        "-Idev",
        "-I$(GENDIR)/lib/libtoml",
        "-I$(GENDIR)/external/libs7/lib/libtoml",
        # "-fno-pie"
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

cc_test(
    name = "toml_link_shared",
    linkstatic = True,
    srcs = SRCS + [
        "toml_test.c",
        "//lib/libtoml:toml_s7.c" ## , "//lib/libtoml:libtoml_s7.h",
    ],
    local_defines = DEFINES,
    deps = DEPS,
    copts = COPTS + [
        "-I$(GENDIR)/lib/libtoml",
        "-I$(GENDIR)/external/libs7/lib/libtoml",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

cc_test(
    name = "toml_link_runtime",
    linkstatic = True,
    srcs = SRCS + ["toml_test.c"],
    local_defines = DEFINES + ["CLIBS_LINK_RUNTIME"],
    deps = DEPS,
    data = ["//lib/libtoml:toml_s7"],
    copts = COPTS + [
        "-I$(GENDIR)/lib/libtoml",
        "-I$(GENDIR)/external/libs7/lib/libtoml",
    ],
    linkopts = LINKOPTS,
    timeout = TIMEOUT
)

################################################################
cc_test(
    name = "utf8proc",
    linkstatic = True,
    srcs = SRCS + ["utf8proc_test.c",
            # "//src:s7",
            # "//src:libs7.h"
            ] + select({
        "//config/clibs/link:shared?": [
            # "//lib/libc:c_s7.c", ## "//lib/libc:libc_s7.h",
            # "//lib/libutf8proc:utf8proc_s7.c",
            ## "//lib/libutf8proc:libutf8proc_s7.h",
        ],
        "//conditions:default": []
    }),
    local_defines = DEFINES,
    deps = DEPS + select({
        "//config/clibs/link:archive?": [
            # "//src:s7",
            "//lib/libutf8proc:utf8proc_s7",
        ],
        "//config/clibs/link:shared?": [
            # "//src:s7",
            "//lib/libutf8proc:utf8proc_s7",
        ],
        "//conditions:default": [],
    }),
    data = select({
        "//config/clibs/link:runtime?": [
            # "//lib/libc:c_s7",
            "//lib/libutf8proc:utf8proc_s7",
        ],
        "//conditions:default": []
    }),
    copts = COPTS + [
        "-I$(GENDIR)/lib/libutf8proc",
        "-I$(GENDIR)/external/libs7/lib/libutf8proc",
    ],
    linkopts = LINKOPTS,
    timeout  = TIMEOUT,
)
