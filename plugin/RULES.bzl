load("@bazel_skylib//lib:dicts.bzl", "dicts")

## rules: clibgen

###############
def _impl(ctx):
    tool_as_list = [ctx.attr._tool]
    tool_inputs, tool_input_mfs = ctx.resolve_tools(tools = tool_as_list)
    args = [
        ctx.expand_location(a, tool_as_list) if "$(location" in a else a
        for a in ctx.attr.args
    ]
    # print("ARGS: %s" % args)
    # print("Gendir: %s" % ctx.var["GENDIR"])
    args.append("--gendir")
    args.append(ctx.var["GENDIR"])
    envs = {
        # Expand $(location) / $(locations) in the values.
        k: ctx.expand_location(v, tool_as_list) if "$(location" in v else v
        for k, v in ctx.attr.env.items()
    }
    # for out in ctx.outputs.outs:
    #     print("Output: %s" % out.path)
    # for o in ctx.outputs.outs:
    #     print("O: %s" % o.path)

    ## RUNFILES: the tool executable (always clibgen.exe) carries the
    ## libs7/scm runfiles, so we need to add those as inputs to the
    ## action.
    ctx.actions.run(
        outputs = ctx.outputs.outs,
        inputs = [ctx.file._script] + ctx.files.srcs + ctx.attr._tool[DefaultInfo].data_runfiles.files.to_list(),
        tools = tool_inputs,
        executable = ctx.executable._tool,
        arguments = args,
        mnemonic = "RunBinary",
        use_default_shell_env = False,
        env = dicts.add(ctx.configuration.default_shell_env, envs),
        input_manifests = tool_input_mfs,
    )

    return DefaultInfo(
        files = depset(ctx.outputs.outs),
        runfiles = ctx.runfiles(
            files = ctx.outputs.outs,
            # transitive_files = ctx.attr.tool[DefaultInfo].data_runfiles.files
        ),
    )

###############
clibgen = rule(
    implementation = _impl,
    doc = "Runs a binary as a build action.\n\nThis rule does not require Bash (unlike" +
          " `native.genrule`).",
    attrs = {
        "_tool": attr.label(
            doc = "The tool to run in the action.\n\nMust be the label of a *_binary rule," +
                  " of a rule that generates an executable file, or of a file that can be" +
                  " executed as a subprocess (e.g. an .exe or .bat file on Windows or a binary" +
                  " with executable permission on Linux). This label is available for" +
                  " `$(location)` expansion in `args` and `env`.",
            default = ":clibgen",
            executable = True,
            allow_single_file = True,
            mandatory = False,
            cfg = "exec",
        ),
        "_script": attr.label(
            default = "clibgen.scm",
            allow_single_file = True
        ),
        "env": attr.string_dict(
            doc = "Environment variables of the action.\n\nSubject to " +
                  " [`$(location)`](https://bazel.build/reference/be/make-variables#predefined_label_variables)" +
                  " expansion.",
        ),
        "srcs": attr.label_list(
            allow_files = True,
            doc = "Additional inputs of the action.\n\nThese labels are available for" +
                  " `$(location)` expansion in `args` and `env`.",
        ),
        "outs": attr.output_list(
            mandatory = True,
            doc = "Output files generated by the action.\n\nThese labels are available for" +
                  " `$(location)` expansion in `args` and `env`.",
        ),
        "args": attr.string_list(
            doc = "Command line arguments of the binary.\n\nSubject to" +
                  " [`$(location)`](https://bazel.build/reference/be/make-variables#predefined_label_variables)" +
                  " expansion.",
        ),
    },
)
