filegroup(
    name = "scm",
    data = glob(["*.scm"]),
    visibility = ["//visibility:public"]
)

cc_binary(
    name  = "repl",
    # srcs  = select({
    #     "//config/repl:archive?": ["repl_static.c"],
    #     "//conditions:default":  ["repl_dynamic.c"]
    # })
    srcs = ["repl.c"] + select({
        "//config/clibs/link:shared?": [
            # "If a rule's name is in the srcs, then this rule
            # automatically depends on that one. If the named rule's
            # outs are C or C++ source files, they are compiled into
            # this rule; if they are library files, they are linked
            # in."
            "//lib/libc:c_s7",
            "//lib/libcwalk:cwalk_s7",
            "//lib/libdl:dl_s7",
            "//lib/libgdbm:gdbm_s7",
            "//lib/libgsl:gsl_s7",
            "//lib/libm:m_s7",
            "//lib/libutf8proc:utf8proc_s7",
        ],
        "//conditions:default": []
    }),
    deps = [
        "//src:s7",
        "//vendored/gopt",
        "//vendored/logc"
    ] + select({
        "//config/clibs/link:archive?": [
            "//lib/libc:c_s7_archive",
            "//lib/libcwalk:cwalk_s7_archive",
            "//lib/libdl:dl_s7_archive",
            "//lib/libgdbm:gdbm_s7_archive",
            "//lib/libgsl:gsl_s7_archive",
            "//lib/libm:m_s7_archive",
            "//lib/libutf8proc:utf8proc_s7_archive",
        ],
        "//conditions:default": []
    }),
    data = [
        ":repl.scm",
        "//scm:srcs",
        "//scm/s7:srcs",
    ] + select({
        "//config/clibs/link:runtime?": [
            "//lib/libc:c_s7",
            "//lib/libcwalk:cwalk_s7",
            "//lib/libdl:dl_s7",
            "//lib/libgdbm:gdbm_s7",
            "//lib/libgsl:gsl_s7",
            "//lib/libm:m_s7",
            "//lib/libutf8proc:utf8proc_s7",
        ],
        "//conditions:default": []
    }),
    copts =  [
        "-Wall",
        "-Wextra",
        # "-Werror=pedantic",
        # "-pedantic-errors",

        "-Isrc",
        "-Iexternal/libs7/src",

        "-I$(GENDIR)/lib/libc",
        "-I$(GENDIR)/external/libs7/lib/libc",
        "-I$(GENDIR)/lib/libcwalk",
        "-I$(GENDIR)/external/libs7/lib/libcwalk",
        "-I$(GENDIR)/lib/libdl",
        "-I$(GENDIR)/external/libs7/lib/libdl",
        "-I$(GENDIR)/lib/libm",
        "-I$(GENDIR)/external/libs7/lib/libm",

        "-Ivendored/gopt",
        "-Iexternal/libs7/vendored/gopt",
        "-Ivendored/logc",
        "-Iexternal/libs7/vendored/logc"
    ] + select({
        # "//:bsd": ["-std=c11"],
        "//:macos": ["-std=c11"],
        "//:linux": [
            "-std=c11",
            "-Wl,export-dynamic",
            ],
        # "//:linux_clang": [
        #     "-std=c11",
        #     "-fPIC",
        #     "-Wl,export-dynamic",
        #     ],
        "//conditions:default": ["-std=c11"],
    }),
    linkopts = select({
        # "//:bsd": ["-Wl,-export-dynamic"],
        "//:macos": [],
        "//:linux": ["-ldl", "-Wl,-export-dynamic"],
        # "//:linux_clang": ["-ldl", "-Wl,-export-dynamic"],
        "//conditions:default": []
    }) + [
        "-lm",
    ],
    defines = select({
        # "//config/clibs/link:archive?": ["CLIBS_LINK_STATIC"],
        "//config/clibs/link:runtime?": ["CLIBS_LINK_RUNTIME"],
        "//conditions:default":   []
    }) + select({
        "//config/host:macos?": ["DSO_EXT=\\\".dylib\\\""],
        "//config/host:linux?": [
            "DSO_EXT=\\\".so\\\"",
            "_XOPEN_SOURCE=500", # strdup
            "_DEFAULT_SOURCE"    # dirent DT_* macros
        ],
        "//conditions:default":   ["DSO_EXT=\\\".so\\\""]
    }) + select({
        "//config:debug?": ["DEBUG_TRACE"],
        "//conditions:default":   []
    }),
    visibility = ["//visibility:public"]
)

##########
## nrepl depends on notcurses, which is yet another big hairy lib

# deps: libdeflate-dev libncurses-dev libunistring-dev

# libgpm: general purpose mouse GPL v2

# multimedia support: libavformat-dev libavutil-dev libswscale-dev
# qrcode support:  libqrcodegen-dev
# other stuff we don't need:  install build-essential cmake doctest-dev pandoc pkg-config
# GPL: libgpm-dev

cc_binary(
    name  = "nrepl",
    srcs  = [
        "nrepl.c",
        "//src:s7.h"
        ## conditional:
        # "nrepl-bits.h",
    ],
    deps = [
        "@notcurses//:notcurses",
        "@libdeflate//:libdeflate",
        "@libunistring//:libunistring",
        "@ncurses//:libncurses",
        "//lib:c_s7",
        "//lib:notcurses_s7",
        "//src:s7",
        "//vendored/logc",
    ],
    data = [
        # "external/notcurses/notcurses/lib/libnotcurses-core.a",
        # "external/notcurses/notcurses/lib/libnotcurses.a",
        "@notcurses//:notcurses",
        "//scm:srcs",
    ],
    copts = [
        "-Wall",
        "-Wextra",
        # "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Isrc",
        "-Ivendored/logc",
        "-Iexternal/vendored/logc",

        "-Iexternal/notcurses/notcurses/include/notcurses",
    ] + select({
        "//:macos": [
            "-Wno-format-pedantic",
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "-Wno-unused-function",
            # "--pedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    defines = [
        "WITH_MAIN",
        "WITH_NOTCURSES",
        "WITH_SYSTEM_EXTRAS",
        # "WITH_C_LOADER",
        "NREPL_DEBUGGING"
    ] + select({
        "//config/nrepl:debug?": ["NREPL_DEBUGGING"],
        "//conditions:default":   []
    }) + select({
        "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = [
        # "-lnotcurses",
        # "-ldeflate",
        # "-lunistring",
        # "-lncurses",
    ] + select({
        # "//:bsd": ["-Wl,-export-dynamic"],
        "//:macos": [],
        "//:linux": ["-ldl", "-Wl,-export-dynamic"],
        # "//:linux_clang": ["-ldl", "-Wl,-export-dynamic"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

################
## legacy repl.c
##########
## linux: gcc -o repl repl.c s7.o -Wl,-export-dynamic -lm -I. -ldl
cc_binary(
    name  = "repl_x",
    srcs  = ["repl.c"],
    deps = ["//src:s7"],
    copts =  [
        "-Wall",
        "-Wextra",
        # "-Werror=pedantic",
        # "-pedantic-errors",
        "-Isrc",
    ] + select({
        # "//:bsd": ["-std=c11"],
        "//:macos": ["-std=c11"],
        "//:linux": [
            "-std=c11",
            "-Wl,export-dynamic",
            ],
        # "//:linux_clang": [
        #     "-std=c11",
        #     "-fPIC",
        #     "-Wl,export-dynamic",
        #     ],
        "//conditions:default": ["-std=c11"],
    }),
    data = ["//scm:srcs"],
    linkopts = select({
        # "//:bsd": ["-Wl,-export-dynamic"],
        "//:macos": [],
        "//:linux": ["-ldl", "-Wl,-export-dynamic"],
        # "//:linux_clang": ["-ldl", "-Wl,-export-dynamic"],
        "//conditions:default": []
    }) + [
        "-lm",
    ],
    visibility = ["//visibility:public"]
)


